<?php
/**
 * ResultModelSvc
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\OneRoster
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OneRoster
 *
 * OneRoster v1.1 API. For details on the OneRoster Version 1.1 Specification, <a href=\"https://www.imsglobal.org/oneroster-v11-final-specification\">click here</a>. The <a href=\"https://developer.blackbaud.com/skyapi/bbem/oneroster/authorization\">Authorization</a> page provides steps to setup and test these endpoints.
 *
 * The version of the OpenAPI document: v1p1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\OneRoster\Model;

use ArrayAccess;
use SKY\OneRoster\ObjectSerializer;

/**
 * ResultModelSvc Class Doc Comment
 *
 * @category Class
 * @description Results model
 * @package  SKY\OneRoster
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResultModelSvc implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResultModelSvc';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scoreStatus' => 'string',
        'scoreDate' => '\DateTime',
        'score' => 'float',
        'comment' => 'string',
        'lineItem' => '\SKY\OneRoster\Model\GuidRefModel',
        'student' => '\SKY\OneRoster\Model\GuidRefModel',
        'sourcedId' => 'string',
        'status' => 'string',
        'dateLastModified' => '\DateTime',
        'metadata' => 'array<string,string>',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'scoreStatus' => null,
        'scoreDate' => 'date-time',
        'score' => 'double',
        'comment' => null,
        'lineItem' => null,
        'student' => null,
        'sourcedId' => null,
        'status' => null,
        'dateLastModified' => 'date-time',
        'metadata' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'scoreStatus' => true,
        'scoreDate' => true,
        'score' => true,
        'comment' => true,
        'lineItem' => false,
        'student' => false,
        'sourcedId' => true,
        'status' => true,
        'dateLastModified' => true,
        'metadata' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scoreStatus' => 'scoreStatus',
        'scoreDate' => 'scoreDate',
        'score' => 'score',
        'comment' => 'comment',
        'lineItem' => 'lineItem',
        'student' => 'student',
        'sourcedId' => 'sourcedId',
        'status' => 'status',
        'dateLastModified' => 'dateLastModified',
        'metadata' => 'metadata',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scoreStatus' => 'setScoreStatus',
        'scoreDate' => 'setScoreDate',
        'score' => 'setScore',
        'comment' => 'setComment',
        'lineItem' => 'setLineItem',
        'student' => 'setStudent',
        'sourcedId' => 'setSourcedId',
        'status' => 'setStatus',
        'dateLastModified' => 'setDateLastModified',
        'metadata' => 'setMetadata',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scoreStatus' => 'getScoreStatus',
        'scoreDate' => 'getScoreDate',
        'score' => 'getScore',
        'comment' => 'getComment',
        'lineItem' => 'getLineItem',
        'student' => 'getStudent',
        'sourcedId' => 'getSourcedId',
        'status' => 'getStatus',
        'dateLastModified' => 'getDateLastModified',
        'metadata' => 'getMetadata',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('scoreStatus', $data ?? [], null);
        $this->setIfExists('scoreDate', $data ?? [], null);
        $this->setIfExists('score', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('lineItem', $data ?? [], null);
        $this->setIfExists('student', $data ?? [], null);
        $this->setIfExists('sourcedId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('dateLastModified', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scoreStatus
     *
     * @return string|null
     */
    public function getScoreStatus()
    {
        return $this->container['scoreStatus'];
    }

    /**
     * Sets scoreStatus
     *
     * @param string|null $scoreStatus Score status
     *
     * @return self
     */
    public function setScoreStatus($scoreStatus)
    {
        if (is_null($scoreStatus)) {
            array_push($this->openAPINullablesSetToNull, 'scoreStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scoreStatus', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scoreStatus'] = $scoreStatus;

        return $this;
    }

    /**
     * Gets scoreDate
     *
     * @return \DateTime|null
     */
    public function getScoreDate()
    {
        return $this->container['scoreDate'];
    }

    /**
     * Sets scoreDate
     *
     * @param \DateTime|null $scoreDate Score date
     *
     * @return self
     */
    public function setScoreDate($scoreDate)
    {
        if (is_null($scoreDate)) {
            array_push($this->openAPINullablesSetToNull, 'scoreDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scoreDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scoreDate'] = $scoreDate;

        return $this;
    }

    /**
     * Gets score
     *
     * @return float|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param float|null $score Score
     *
     * @return self
     */
    public function setScore($score)
    {
        if (is_null($score)) {
            array_push($this->openAPINullablesSetToNull, 'score');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('score', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets lineItem
     *
     * @return \SKY\OneRoster\Model\GuidRefModel|null
     */
    public function getLineItem()
    {
        return $this->container['lineItem'];
    }

    /**
     * Sets lineItem
     *
     * @param \SKY\OneRoster\Model\GuidRefModel|null $lineItem lineItem
     *
     * @return self
     */
    public function setLineItem($lineItem)
    {
        if (is_null($lineItem)) {
            throw new \InvalidArgumentException('non-nullable lineItem cannot be null');
        }
        $this->container['lineItem'] = $lineItem;

        return $this;
    }

    /**
     * Gets student
     *
     * @return \SKY\OneRoster\Model\GuidRefModel|null
     */
    public function getStudent()
    {
        return $this->container['student'];
    }

    /**
     * Sets student
     *
     * @param \SKY\OneRoster\Model\GuidRefModel|null $student student
     *
     * @return self
     */
    public function setStudent($student)
    {
        if (is_null($student)) {
            throw new \InvalidArgumentException('non-nullable student cannot be null');
        }
        $this->container['student'] = $student;

        return $this;
    }

    /**
     * Gets sourcedId
     *
     * @return string|null
     */
    public function getSourcedId()
    {
        return $this->container['sourcedId'];
    }

    /**
     * Sets sourcedId
     *
     * @param string|null $sourcedId Unique identifier for the instance
     *
     * @return self
     */
    public function setSourcedId($sourcedId)
    {
        if (is_null($sourcedId)) {
            array_push($this->openAPINullablesSetToNull, 'sourcedId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourcedId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourcedId'] = $sourcedId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status for the instance
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets dateLastModified
     *
     * @return \DateTime|null
     */
    public function getDateLastModified()
    {
        return $this->container['dateLastModified'];
    }

    /**
     * Sets dateLastModified
     *
     * @param \DateTime|null $dateLastModified Date and time the instance was last modified
     *
     * @return self
     */
    public function setDateLastModified($dateLastModified)
    {
        if (is_null($dateLastModified)) {
            array_push($this->openAPINullablesSetToNull, 'dateLastModified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateLastModified', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateLastModified'] = $dateLastModified;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Extension properties for the instance
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
