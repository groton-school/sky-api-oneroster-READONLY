<?php
/**
 * ORUserModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\OneRoster
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OneRoster
 *
 * OneRoster v1.1 API. For details on the OneRoster Version 1.1 Specification, <a href=\"https://www.imsglobal.org/oneroster-v11-final-specification\">click here</a>. The <a href=\"https://developer.blackbaud.com/skyapi/bbem/oneroster/authorization\">Authorization</a> page provides steps to setup and test these endpoints.
 *
 * The version of the OpenAPI document: v1p1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\OneRoster\Model;

use ArrayAccess;
use SKY\OneRoster\ObjectSerializer;

/**
 * ORUserModel Class Doc Comment
 *
 * @category Class
 * @package  SKY\OneRoster
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ORUserModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ORUserModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'username' => 'string',
        'userIds' => '\SKY\OneRoster\Model\UserIdModel[]',
        'enabledUser' => 'bool',
        'givenName' => 'string',
        'familyName' => 'string',
        'middleName' => 'string',
        'role' => 'string',
        'identifier' => 'string',
        'email' => 'string',
        'sms' => 'string',
        'phone' => 'string',
        'agents' => '\SKY\OneRoster\Model\GuidRefModel[]',
        'orgs' => '\SKY\OneRoster\Model\GuidRefModel[]',
        'grades' => 'string[]',
        'password' => 'string',
        'sourcedId' => 'string',
        'status' => 'string',
        'dateLastModified' => '\DateTime',
        'metadata' => 'array<string,string>',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'username' => null,
        'userIds' => null,
        'enabledUser' => null,
        'givenName' => null,
        'familyName' => null,
        'middleName' => null,
        'role' => null,
        'identifier' => null,
        'email' => null,
        'sms' => null,
        'phone' => null,
        'agents' => null,
        'orgs' => null,
        'grades' => null,
        'password' => null,
        'sourcedId' => null,
        'status' => null,
        'dateLastModified' => 'date-time',
        'metadata' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'username' => true,
        'userIds' => true,
        'enabledUser' => true,
        'givenName' => true,
        'familyName' => true,
        'middleName' => true,
        'role' => true,
        'identifier' => true,
        'email' => true,
        'sms' => true,
        'phone' => true,
        'agents' => true,
        'orgs' => true,
        'grades' => true,
        'password' => true,
        'sourcedId' => true,
        'status' => true,
        'dateLastModified' => true,
        'metadata' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'userIds' => 'userIds',
        'enabledUser' => 'enabledUser',
        'givenName' => 'givenName',
        'familyName' => 'familyName',
        'middleName' => 'middleName',
        'role' => 'role',
        'identifier' => 'identifier',
        'email' => 'email',
        'sms' => 'sms',
        'phone' => 'phone',
        'agents' => 'agents',
        'orgs' => 'orgs',
        'grades' => 'grades',
        'password' => 'password',
        'sourcedId' => 'sourcedId',
        'status' => 'status',
        'dateLastModified' => 'dateLastModified',
        'metadata' => 'metadata',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'userIds' => 'setUserIds',
        'enabledUser' => 'setEnabledUser',
        'givenName' => 'setGivenName',
        'familyName' => 'setFamilyName',
        'middleName' => 'setMiddleName',
        'role' => 'setRole',
        'identifier' => 'setIdentifier',
        'email' => 'setEmail',
        'sms' => 'setSms',
        'phone' => 'setPhone',
        'agents' => 'setAgents',
        'orgs' => 'setOrgs',
        'grades' => 'setGrades',
        'password' => 'setPassword',
        'sourcedId' => 'setSourcedId',
        'status' => 'setStatus',
        'dateLastModified' => 'setDateLastModified',
        'metadata' => 'setMetadata',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'userIds' => 'getUserIds',
        'enabledUser' => 'getEnabledUser',
        'givenName' => 'getGivenName',
        'familyName' => 'getFamilyName',
        'middleName' => 'getMiddleName',
        'role' => 'getRole',
        'identifier' => 'getIdentifier',
        'email' => 'getEmail',
        'sms' => 'getSms',
        'phone' => 'getPhone',
        'agents' => 'getAgents',
        'orgs' => 'getOrgs',
        'grades' => 'getGrades',
        'password' => 'getPassword',
        'sourcedId' => 'getSourcedId',
        'status' => 'getStatus',
        'dateLastModified' => 'getDateLastModified',
        'metadata' => 'getMetadata',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('userIds', $data ?? [], null);
        $this->setIfExists('enabledUser', $data ?? [], null);
        $this->setIfExists('givenName', $data ?? [], null);
        $this->setIfExists('familyName', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('sms', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('agents', $data ?? [], null);
        $this->setIfExists('orgs', $data ?? [], null);
        $this->setIfExists('grades', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('sourcedId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('dateLastModified', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets userIds
     *
     * @return \SKY\OneRoster\Model\UserIdModel[]|null
     */
    public function getUserIds()
    {
        return $this->container['userIds'];
    }

    /**
     * Sets userIds
     *
     * @param \SKY\OneRoster\Model\UserIdModel[]|null $userIds userIds
     *
     * @return self
     */
    public function setUserIds($userIds)
    {
        if (is_null($userIds)) {
            array_push($this->openAPINullablesSetToNull, 'userIds');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userIds', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['userIds'] = $userIds;

        return $this;
    }

    /**
     * Gets enabledUser
     *
     * @return bool|null
     */
    public function getEnabledUser()
    {
        return $this->container['enabledUser'];
    }

    /**
     * Sets enabledUser
     *
     * @param bool|null $enabledUser enabledUser
     *
     * @return self
     */
    public function setEnabledUser($enabledUser)
    {
        if (is_null($enabledUser)) {
            array_push($this->openAPINullablesSetToNull, 'enabledUser');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enabledUser', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enabledUser'] = $enabledUser;

        return $this;
    }

    /**
     * Gets givenName
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['givenName'];
    }

    /**
     * Sets givenName
     *
     * @param string|null $givenName givenName
     *
     * @return self
     */
    public function setGivenName($givenName)
    {
        if (is_null($givenName)) {
            array_push($this->openAPINullablesSetToNull, 'givenName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('givenName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['givenName'] = $givenName;

        return $this;
    }

    /**
     * Gets familyName
     *
     * @return string|null
     */
    public function getFamilyName()
    {
        return $this->container['familyName'];
    }

    /**
     * Sets familyName
     *
     * @param string|null $familyName familyName
     *
     * @return self
     */
    public function setFamilyName($familyName)
    {
        if (is_null($familyName)) {
            array_push($this->openAPINullablesSetToNull, 'familyName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('familyName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['familyName'] = $familyName;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName middleName
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        if (is_null($middleName)) {
            array_push($this->openAPINullablesSetToNull, 'middleName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middleName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            array_push($this->openAPINullablesSetToNull, 'role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if (is_null($identifier)) {
            array_push($this->openAPINullablesSetToNull, 'identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identifier', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets sms
     *
     * @return string|null
     */
    public function getSms()
    {
        return $this->container['sms'];
    }

    /**
     * Sets sms
     *
     * @param string|null $sms sms
     *
     * @return self
     */
    public function setSms($sms)
    {
        if (is_null($sms)) {
            array_push($this->openAPINullablesSetToNull, 'sms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sms', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sms'] = $sms;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets agents
     *
     * @return \SKY\OneRoster\Model\GuidRefModel[]|null
     */
    public function getAgents()
    {
        return $this->container['agents'];
    }

    /**
     * Sets agents
     *
     * @param \SKY\OneRoster\Model\GuidRefModel[]|null $agents agents
     *
     * @return self
     */
    public function setAgents($agents)
    {
        if (is_null($agents)) {
            array_push($this->openAPINullablesSetToNull, 'agents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agents', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['agents'] = $agents;

        return $this;
    }

    /**
     * Gets orgs
     *
     * @return \SKY\OneRoster\Model\GuidRefModel[]|null
     */
    public function getOrgs()
    {
        return $this->container['orgs'];
    }

    /**
     * Sets orgs
     *
     * @param \SKY\OneRoster\Model\GuidRefModel[]|null $orgs orgs
     *
     * @return self
     */
    public function setOrgs($orgs)
    {
        if (is_null($orgs)) {
            array_push($this->openAPINullablesSetToNull, 'orgs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orgs', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orgs'] = $orgs;

        return $this;
    }

    /**
     * Gets grades
     *
     * @return string[]|null
     */
    public function getGrades()
    {
        return $this->container['grades'];
    }

    /**
     * Sets grades
     *
     * @param string[]|null $grades grades
     *
     * @return self
     */
    public function setGrades($grades)
    {
        if (is_null($grades)) {
            array_push($this->openAPINullablesSetToNull, 'grades');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grades', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grades'] = $grades;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets sourcedId
     *
     * @return string|null
     */
    public function getSourcedId()
    {
        return $this->container['sourcedId'];
    }

    /**
     * Sets sourcedId
     *
     * @param string|null $sourcedId sourcedId
     *
     * @return self
     */
    public function setSourcedId($sourcedId)
    {
        if (is_null($sourcedId)) {
            array_push($this->openAPINullablesSetToNull, 'sourcedId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourcedId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourcedId'] = $sourcedId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets dateLastModified
     *
     * @return \DateTime|null
     */
    public function getDateLastModified()
    {
        return $this->container['dateLastModified'];
    }

    /**
     * Sets dateLastModified
     *
     * @param \DateTime|null $dateLastModified dateLastModified
     *
     * @return self
     */
    public function setDateLastModified($dateLastModified)
    {
        if (is_null($dateLastModified)) {
            array_push($this->openAPINullablesSetToNull, 'dateLastModified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateLastModified', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateLastModified'] = $dateLastModified;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
