/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/academicSessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * AcademicSessions all
         * @description Returns a collection of academic sessions.
         */
        get: operations["getAllAcademicSessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/academicSessions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * AcademicSession by id
         * @description Returns a specific academic session.
         */
        get: operations["getAcademicSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Terms all
         * @description Returns a collection of terms.
         */
        get: operations["getAllTerms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Term by id
         * @description Returns a specific term.
         */
        get: operations["getTerm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gradingPeriods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GradingPeriods all
         * @description Returns a collection of grading periods.
         */
        get: operations["getAllGradingPeriods"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gradingPeriods/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GradingPeriod by id
         * @description Returns a specific grading period.
         */
        get: operations["getGradingPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Categories all
         * @description Returns a collection of categories.
         */
        get: operations["getAllCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Category by id
         * @description Returns a specific category.
         */
        get: operations["getCategory"];
        /**
         * Category create/update
         * @description Returns the category object that was created or updated.
         */
        put: operations["putCategory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Classes all
         * @description Returns a collection of classes.
         */
        get: operations["getAllClasses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Class by id
         * @description Returns a specific class.
         */
        get: operations["getClass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Courses all
         * @description Returns a collection of courses.
         */
        get: operations["getAllCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Course by id
         * @description Returns a specific course.
         */
        get: operations["getCourse"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Enrollments all
         * @description Returns a collection of enrollments.
         */
        get: operations["getAllEnrollments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Enrollment by id
         * @description Returns a specific enrollment.
         */
        get: operations["getEnrollment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lineItems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * LineItems all
         * @description Returns a collection of lineItems.
         */
        get: operations["getAllLineItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lineItems/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * LineItem by id
         * @description Returns a specific lineItem.
         */
        get: operations["getLineItem"];
        /**
         * LineItem create/update
         * @description Returns the lineItem object that was created or updated.
         */
        put: operations["putLineItem"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Orgs all
         * @description Returns a collection of organizations.
         */
        get: operations["getAllOrgs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Org by id
         * @description Returns a specific org.
         */
        get: operations["getOrg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Results all
         * @description Returns a collection of results.
         */
        get: operations["getAllResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/results/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Result by id
         * @description Returns a specific result.
         */
        get: operations["getResult"];
        /**
         * Result create/update
         * @description Returns the result object that was created or updated.
         */
        put: operations["putResult"];
        post?: never;
        /**
         * Result delete
         * @description Deletes the specified result sourcedId.
         */
        delete: operations["deleteResult"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Schools all
         * @description Returns a collection of schools.
         */
        get: operations["getAllSchools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * School by id
         * @description Returns a specific school.
         */
        get: operations["getSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users all
         * @description Returns a collection of user data.
         */
        get: operations["getAllUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * User by id
         * @description Returns a single user for the specified ```id```.
         */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teachers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Teachers all
         * @description Returns a collection of teacher user data. <br />
         *     Roles returned include:
         *     <ul><li>Teacher</li><li>Pending Teacher</li></ul>
         */
        get: operations["getAllTeachers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teachers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Teacher by id
         * @description Returns a single teacher user for the specified ```id```. <br />
         *     Roles returned include:
         *     <ul><li>Teacher</li><li>Pending Teacher</li></ul>
         */
        get: operations["getTeacher"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Students all
         * @description Returns a collection of student user data.
         */
        get: operations["getAllStudents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/students/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Student by id
         * @description Returns a single student user for the specified ```id```. <br />
         */
        get: operations["getStudent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classes/{class_id}/lineItems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * LineItems for a class
         * @description Returns a collection of lineItems for the specified ```class_id```.
         */
        get: operations["getLineItemsForClass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classes/{class_id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Results for a class
         * @description Returns a collection of results for a specified ```class_id```.
         */
        get: operations["getResultsForClass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classes/{class_id}/lineItems/{li_id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Results for a lineItem for a class
         * @description Returns a collection of results for the specified ```class_id``` and ```li_id```.
         */
        get: operations["getResultsForLineItemForClass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classes/{class_id}/students/{student_id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Results for a student for a class
         * @description Returns a collection of results for a specified ```class_id``` and ```student_id```.
         */
        get: operations["getResultsForStudentForClass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools/{school_id}/classes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Classes for a school
         * @description Returns a collection of classes for the specified ```school_id```.
         */
        get: operations["getClassesForSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools/{school_id}/teachers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Teachers for school
         * @description Returns a collection of teacher user data for the specified ```school_id```. <br />
         *     Roles returned include:
         *     <ul><li>Teacher</li><li>Pending Teacher</li></ul>
         */
        get: operations["getTeachersForSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools/{school_id}/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Students for school
         * @description Returns a collection of student user data for the specified ```school_id```.
         */
        get: operations["getStudentsForSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools/{school_id}/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Enrollments for a school
         * @description Returns a collection of enrollments for the specified ```school_id```.
         */
        get: operations["getEnrollmentsForSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teachers/{teacher_id}/classes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Classes for a teacher
         * @description Returns a collection of classes for the specified ```teacher_id```.
         */
        get: operations["getClassesForTeacher"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classes/{class_id}/teachers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Teachers for class
         * @description Returns a collection of teacher user data for the specified ```class_id```. <br />
         *     Roles returned include:
         *     <ul><li>Teacher</li><li>Pending Teacher</li></ul>
         */
        get: operations["getTeachersForClass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classes/{class_id}/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Students for class
         * @description Returns a collection of student user data for the specified ```class_id```.
         */
        get: operations["getStudentsForClass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools/{school_id}/terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Terms for school
         * @description Returns a collection of terms for the specified ```school_id```.
         */
        get: operations["getTermsForSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms/{term_id}/gradingPeriods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GradingPeriods for term
         * @description Returns a collection of grading periods for the specified ```term_id```
         */
        get: operations["getGradingPeriodsForTerm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools/{school_id}/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Courses for school
         * @description Returns a collection of courses for the specified ```school_id```.
         */
        get: operations["getCoursesForSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/demographics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Demographics all
         * @description Returns a collection of user's demographic data.
         */
        get: operations["getAllDemographics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/demographics/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Demographics by id
         * @description Returns a single user's demographic data for the specified ```id```..
         */
        get: operations["getDemographics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/classes/{class_id}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Categories for a class
         * @description Returns a collection of categories for a specified ```class_id```.
         */
        get: operations["getCategoriesForClass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schools/{school_id}/classes/{class_id}/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Enrollments for a class in a school
         * @description Returns a collection of enrollments for the specified ```class_id``` in the ```school_id```.
         */
        get: operations["getEnrollmentsForClassInSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AcademicSessionModel: {
            title?: string | null;
            startDate?: string | null;
            endDate?: string | null;
            type?: string | null;
            parent?: components["schemas"]["GuidRefModel"];
            children?: components["schemas"]["GuidRefModel"][] | null;
            schoolYear?: string | null;
            sourcedId?: string | null;
            status?: string | null;
            /** Format: date-time */
            dateLastModified?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
        };
        AcademicSessionOutputModel: {
            academicSession?: components["schemas"]["AcademicSessionModel"];
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        AcademicSessionsOutputModel: {
            academicSessions?: components["schemas"]["AcademicSessionModel"][] | null;
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        CategoriesOutputModel: {
            categories?: components["schemas"]["CategoryModel"][] | null;
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        CategoryInputModel: {
            category?: components["schemas"]["CategoryModel"];
        };
        CategoryModel: {
            title?: string | null;
            sourcedId?: string | null;
            status?: string | null;
            /** Format: date-time */
            dateLastModified?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
        };
        CategoryOutputModel: {
            category?: components["schemas"]["CategoryModel"];
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        ClassModel: {
            title?: string | null;
            classCode?: string | null;
            classType?: string | null;
            location?: string | null;
            grades?: string[] | null;
            subjects?: string[] | null;
            course?: components["schemas"]["GuidRefModel"];
            school?: components["schemas"]["GuidRefModel"];
            terms?: components["schemas"]["GuidRefModel"][] | null;
            subjectCodes?: string[] | null;
            periods?: string[] | null;
            resources?: components["schemas"]["GuidRefModel"][] | null;
            sourcedId?: string | null;
            status?: string | null;
            /** Format: date-time */
            dateLastModified?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
        };
        ClassOutputModel: {
            class?: components["schemas"]["ClassModel"];
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        ClassesOutputModel: {
            classes?: components["schemas"]["ClassModel"][] | null;
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        CourseModel: {
            title?: string | null;
            schoolYear?: components["schemas"]["GuidRefModel"];
            courseCode?: string | null;
            grades?: string[] | null;
            subjects?: string[] | null;
            org?: components["schemas"]["GuidRefModel"];
            subjectCodes?: string[] | null;
            resources?: components["schemas"]["GuidRefModel"][] | null;
            sourcedId?: string | null;
            status?: string | null;
            /** Format: date-time */
            dateLastModified?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
        };
        CourseOutputModel: {
            course?: components["schemas"]["CourseModel"];
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        CoursesOutputModel: {
            courses?: components["schemas"]["CourseModel"][] | null;
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        DemographicOutputModel: {
            demographic?: components["schemas"]["ORDemographicModel"];
        };
        DemographicsOutputModel: {
            demographics?: components["schemas"]["ORDemographicModel"][] | null;
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        EnrollmentModel: {
            user?: components["schemas"]["GuidRefModel"];
            class?: components["schemas"]["GuidRefModel"];
            school?: components["schemas"]["GuidRefModel"];
            role?: string | null;
            primary?: boolean | null;
            beginDate?: string | null;
            endDate?: string | null;
            sourcedId?: string | null;
            status?: string | null;
            /** Format: date-time */
            dateLastModified?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
        };
        EnrollmentOutputModel: {
            enrollment?: components["schemas"]["EnrollmentModel"];
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        EnrollmentsOutputModel: {
            enrollments?: components["schemas"]["EnrollmentModel"][] | null;
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        GuidRefModel: {
            sourcedId?: string | null;
            href?: string | null;
            type?: string | null;
        };
        LineItemInputModel: {
            lineItem?: components["schemas"]["LineItemModel"];
        };
        LineItemModel: {
            title?: string | null;
            description?: string | null;
            /** Format: date-time */
            assignDate?: string | null;
            /** Format: date-time */
            dueDate?: string | null;
            class?: components["schemas"]["GuidRefModel"];
            category?: components["schemas"]["GuidRefModel"];
            gradingPeriod?: components["schemas"]["GuidRefModel"];
            /** Format: double */
            resultValueMin?: number | null;
            /** Format: double */
            resultValueMax?: number | null;
            sourcedId?: string | null;
            status?: string | null;
            /** Format: date-time */
            dateLastModified?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
        };
        LineItemOutputModel: {
            lineItem?: components["schemas"]["LineItemModel"];
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        LineItemsOutputModel: {
            lineItems?: components["schemas"]["LineItemModel"][] | null;
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        ORDemographicModel: {
            birthDate?: string | null;
            sex?: string | null;
            americanIndianOrAlaskaNative?: boolean | null;
            asian?: boolean | null;
            blackOrAfricanAmerican?: boolean | null;
            nativeHawaiianOrOtherPacificIslander?: boolean | null;
            white?: boolean | null;
            demographicRaceTwoOrMoreRaces?: boolean | null;
            hispanicOrLatinoEthnicity?: boolean | null;
            countryOfBirthCode?: string | null;
            stateOfBirthAbbreviation?: string | null;
            cityOfBirth?: string | null;
            publicSchoolResidenceStatus?: string | null;
            sourcedId?: string | null;
            status?: string | null;
            /** Format: date-time */
            dateLastModified?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
        };
        ORUserModel: {
            username?: string | null;
            userIds?: components["schemas"]["UserIdModel"][] | null;
            enabledUser?: boolean | null;
            givenName?: string | null;
            familyName?: string | null;
            middleName?: string | null;
            role?: string | null;
            identifier?: string | null;
            email?: string | null;
            sms?: string | null;
            phone?: string | null;
            agents?: components["schemas"]["GuidRefModel"][] | null;
            orgs?: components["schemas"]["GuidRefModel"][] | null;
            grades?: string[] | null;
            password?: string | null;
            sourcedId?: string | null;
            status?: string | null;
            /** Format: date-time */
            dateLastModified?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
        };
        OrgModel: {
            name?: string | null;
            type?: string | null;
            identifier?: string | null;
            parent?: components["schemas"]["GuidRefModel"];
            children?: components["schemas"]["GuidRefModel"][] | null;
            sourcedId?: string | null;
            status?: string | null;
            /** Format: date-time */
            dateLastModified?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
        };
        OrgOutputModel: {
            org?: components["schemas"]["OrgModel"];
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        OrgsOutputModel: {
            orgs?: components["schemas"]["OrgModel"][] | null;
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        /** @description Results input model */
        ResultInputModelSvc: {
            result?: components["schemas"]["ResultModelSvc"];
        };
        /** @description Results model */
        ResultModelSvc: {
            /** @description Score status */
            scoreStatus?: string | null;
            /**
             * Format: date-time
             * @description Score date
             */
            scoreDate?: string | null;
            /**
             * Format: double
             * @description Score
             */
            score?: number | null;
            /** @description Comment */
            comment?: string | null;
            lineItem?: components["schemas"]["GuidRefModel"];
            student?: components["schemas"]["GuidRefModel"];
            /** @description Unique identifier for the instance */
            sourcedId?: string | null;
            /** @description Status for the instance */
            status?: string | null;
            /**
             * Format: date-time
             * @description Date and time the instance was last modified
             */
            dateLastModified?: string | null;
            /** @description Extension properties for the instance */
            metadata?: {
                [key: string]: string;
            } | null;
        };
        /** @description Result */
        ResultOutputModelSvc: {
            result?: components["schemas"]["ResultModelSvc"];
            /** @description List of status messages */
            status_info_set?: components["schemas"]["StatusInfoModel"][] | null;
        };
        /** @description Result */
        ResultsOutputModelSvc: {
            /** @description Results */
            results?: components["schemas"]["ResultModelSvc"][] | null;
            /** @description List of status messages */
            status_info_set?: components["schemas"]["StatusInfoModel"][] | null;
        };
        StatusInfoModel: {
            imsx_codeMajor?: string | null;
            imsx_severity?: string | null;
            imsx_messageRefIdentifier?: string | null;
            imsx_operationRefIdentifier?: string | null;
            imsx_description?: string | null;
            imsx_codeMinor?: string | null;
        };
        UserIdModel: {
            type?: string | null;
            identifier?: string | null;
        };
        UserOutputModel: {
            user?: components["schemas"]["ORUserModel"];
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
        UsersOutputModel: {
            users?: components["schemas"]["ORUserModel"][] | null;
            statusInfoSet?: components["schemas"]["StatusInfoModel"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAllAcademicSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicSessionsOutputModel"];
                };
            };
        };
    };
    getAcademicSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the academic session */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicSessionOutputModel"];
                };
            };
        };
    };
    getAllTerms: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicSessionsOutputModel"];
                };
            };
        };
    };
    getTerm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the term */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicSessionOutputModel"];
                };
            };
        };
    };
    getAllGradingPeriods: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicSessionsOutputModel"];
                };
            };
        };
    };
    getGradingPeriod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the grading period */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicSessionOutputModel"];
                };
            };
        };
    };
    getAllCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriesOutputModel"];
                };
            };
        };
    };
    getCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the category */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryOutputModel"];
                };
            };
        };
    };
    putCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the category */
                id: string;
            };
            cookie?: never;
        };
        /** @description input model for a category */
        requestBody?: {
            content: {
                /** @example {
                 *       "category": {
                 *         "title": "Homework",
                 *         "sourcedId": "lic-222-sourcedId",
                 *         "status": "active",
                 *         "dateLastModified": "2022-09-26T01:30:00.0000000+00:00"
                 *       }
                 *     } */
                "application/json": components["schemas"]["CategoryInputModel"];
            };
        };
        responses: {
            /** @description OK - It was possible to read the resource. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryOutputModel"];
                };
            };
        };
    };
    getAllClasses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClassesOutputModel"];
                };
            };
        };
    };
    getClass: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the class */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClassOutputModel"];
                };
            };
        };
    };
    getAllCourses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CoursesOutputModel"];
                };
            };
        };
    };
    getCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the course */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseOutputModel"];
                };
            };
        };
    };
    getAllEnrollments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentsOutputModel"];
                };
            };
        };
    };
    getEnrollment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the enrollment */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentOutputModel"];
                };
            };
        };
    };
    getAllLineItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemsOutputModel"];
                };
            };
        };
    };
    getLineItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the lineItem */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemOutputModel"];
                };
            };
        };
    };
    putLineItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the lineItem */
                id: string;
            };
            cookie?: never;
        };
        /** @description input model for the lineItem */
        requestBody?: {
            content: {
                /** @example {
                 *       "lineItem": {
                 *         "title": "Assignment Title 1",
                 *         "description": "Assignment Description for Assignment 1",
                 *         "assignDate": "2022-09-26T01:30:00.0000000+00:00",
                 *         "dueDate": "2022-09-29T01:30:00.0000000+00:00",
                 *         "class": {
                 *           "sourcedId": "cls-222-12345",
                 *           "href": "https://api.sky.blackbaud.com/afe-rostr/ims/oneroster/v1p1/classes/cls-222-12345",
                 *           "type": "class"
                 *         },
                 *         "category": {
                 *           "sourcedId": "lic-222-345",
                 *           "href": "https://api.sky.blackbaud.com/afe-rostr/ims/oneroster/v1p1/categories/lic-222-345",
                 *           "type": "category"
                 *         },
                 *         "gradingPeriod": {
                 *           "sourcedId": "as-grp-222-6789",
                 *           "href": "https://api.sky.blackbaud.com/afe-rostr/ims/oneroster/v1p1/gradingperiods/as-grp-222-6789",
                 *           "type": "academicSession"
                 *         },
                 *         "resultValueMin": 0,
                 *         "resultValueMax": 10,
                 *         "sourcedId": "external-lineitem-sourcedId",
                 *         "status": "active",
                 *         "dateLastModified": "2022-09-26T01:30:00.0000000+00:00"
                 *       }
                 *     } */
                "application/json": components["schemas"]["LineItemInputModel"];
            };
        };
        responses: {
            /** @description OK - It was possible to read the resource. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemOutputModel"];
                };
            };
        };
    };
    getAllOrgs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrgsOutputModel"];
                };
            };
        };
    };
    getOrg: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the org */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrgOutputModel"];
                };
            };
        };
    };
    getAllResults: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultsOutputModelSvc"];
                };
            };
        };
    };
    getResult: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the result */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultOutputModelSvc"];
                };
            };
        };
    };
    putResult: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the result */
                id: string;
            };
            cookie?: never;
        };
        /** @description input model for the result */
        requestBody?: {
            content: {
                /** @example {
                 *       "result": {
                 *         "scoreStatus": "fully graded",
                 *         "scoreDate": "2022-09-26T01:30:00.0000000+00:00",
                 *         "score": 88,
                 *         "comment": "Result comment",
                 *         "lineItem": {
                 *           "sourcedId": "<external-lineitem-id>",
                 *           "href": "https://api.sky.blackbaud.com/afe-rostr/ims/oneroster/v1p1/lineitems/<external-lineitem-ID>",
                 *           "type": "lineItem"
                 *         },
                 *         "student": {
                 *           "sourcedId": "usr-222-12345678",
                 *           "href": "https://api.sky.blackbaud.com/afe-rostr/ims/oneroster/v1p1/users/cls-222-12345678",
                 *           "type": "user"
                 *         },
                 *         "sourcedId": "<external-result-ID>",
                 *         "status": "active",
                 *         "dateLastModified": "2022-09-26T01:30:00.0000000+00:00"
                 *       }
                 *     } */
                "application/json": components["schemas"]["ResultInputModelSvc"];
            };
        };
        responses: {
            /** @description OK - It was possible to read the resource. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultOutputModelSvc"];
                };
            };
        };
    };
    deleteResult: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the result */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - Resource has been deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultsOutputModelSvc"];
                };
            };
        };
    };
    getAllSchools: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrgsOutputModel"];
                };
            };
        };
    };
    getSchool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the school */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrgOutputModel"];
                };
            };
        };
    };
    getAllUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersOutputModel"];
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the user */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOutputModel"];
                };
            };
        };
    };
    getAllTeachers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersOutputModel"];
                };
            };
        };
    };
    getTeacher: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the teacher */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOutputModel"];
                };
            };
        };
    };
    getAllStudents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersOutputModel"];
                };
            };
        };
    };
    getStudent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the student */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOutputModel"];
                };
            };
        };
    };
    getLineItemsForClass: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the class */
                class_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemsOutputModel"];
                };
            };
        };
    };
    getResultsForClass: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the class */
                class_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultsOutputModelSvc"];
                };
            };
        };
    };
    getResultsForLineItemForClass: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the class */
                class_id: string;
                /** @description sourcedId for the lineItem */
                li_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultsOutputModelSvc"];
                };
            };
        };
    };
    getResultsForStudentForClass: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the class */
                class_id: string;
                /** @description sourcedId for the student */
                student_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResultsOutputModelSvc"];
                };
            };
        };
    };
    getClassesForSchool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the school */
                school_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClassOutputModel"];
                };
            };
        };
    };
    getTeachersForSchool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the school */
                school_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersOutputModel"];
                };
            };
        };
    };
    getStudentsForSchool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the school */
                school_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersOutputModel"];
                };
            };
        };
    };
    getEnrollmentsForSchool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the school */
                school_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentsOutputModel"];
                };
            };
        };
    };
    getClassesForTeacher: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the teacher */
                teacher_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClassOutputModel"];
                };
            };
        };
    };
    getTeachersForClass: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the class */
                class_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersOutputModel"];
                };
            };
        };
    };
    getStudentsForClass: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the class */
                class_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersOutputModel"];
                };
            };
        };
    };
    getTermsForSchool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the school */
                school_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicSessionsOutputModel"];
                };
            };
        };
    };
    getGradingPeriodsForTerm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the term */
                term_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicSessionsOutputModel"];
                };
            };
        };
    };
    getCoursesForSchool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the teacher */
                school_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CoursesOutputModel"];
                };
            };
        };
    };
    getAllDemographics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DemographicsOutputModel"];
                };
            };
        };
    };
    getDemographics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the user */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DemographicOutputModel"];
                };
            };
        };
    };
    getCategoriesForClass: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the category */
                class_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriesOutputModel"];
                };
            };
        };
    };
    getEnrollmentsForClassInSchool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description sourcedId for the school */
                school_id: string;
                /** @description sourcedId for the class */
                class_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - It was possible to read the collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentsOutputModel"];
                };
            };
        };
    };
}
